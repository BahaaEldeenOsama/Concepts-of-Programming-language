precedence:
1) ()
2) %
3) < , *
4) ^ , +


Grammer:
<assign> ->  <id> = <expr>
<expr>   ->  <term> ^ <expr>  | <expr> + <term> | <term>
<term>   ->  <term> < <factor>| <term> * <factor>| <factor>
<factor> ->  <factor>  % <newexp>  | <newexp>
<newexp> ->  (<expr>)  | <id>
<id>     ->  A | B | C | D


 

<assign> ->  <id> = <expr>
         ->    A  = <expr>
         ->    A  = <expr> + <term>
         ->    A  = <term> + <term>
         ->    A  = <term> * <factor> + <term>
         ->    A  = <factor> * <factor> + <term> 
         ->    A  = <newexp> * <factor> + <term>
         ->    A  = (<expr>) * <factor> + <term>
         ->    A  = (<term> ^ <expr>) * <factor> + <term>
         ->    A  = (<factor> ^ <expr>) * <factor> + <term>
         ->    A  = (<newexp> ^ <expr>) * <factor> + <term>
         ->    A  = (<id> ^ <expr>) * <factor> + <term>
         ->    A  = ( B ^ <expr>) * <factor> + <term>
         ->    A  = ( B ^ <term>) * <factor> + <term>
         ->    A  = ( B ^  <term> < <factor>) * <factor> + <term>
         ->    A  = ( B ^  <factor> < <factor>) * <factor> + <term>
         ->    A  = ( B ^  <newexp> < <factor>) * <factor> + <term>
         ->    A  = ( B ^  <id> < <factor>) * <factor> + <term>
         ->    A  = ( B ^  C < <factor>) * <factor> + <term>
         ->    A  = ( B ^  C < <factor> % <newexp>) * <factor> + <term>
         ->    A  = ( B ^  C < <newexp> % <newexp>) * <factor> + <term>
         ->    A  = ( B ^  C < <id> % <newexp>) * <factor> + <term>
         ->    A  = ( B ^  C <  A % <newexp>) * <factor> + <term>
         ->    A  = ( B ^  C <  A % <id>) * <factor> + <term>
         ->    A  = ( B ^  C <  A % C) * <factor> + <term>
         ->    A  = ( B ^  C <  A % C) * <newexp> + <term> 
         ->    A  = ( B ^  C <  A % C) * <id> + <term>
         ->    A  = ( B ^  C <  A % C) * D + <term> 
         ->    A  = ( B ^  C <  A % C) * D + <factor>
         ->    A  = ( B ^  C <  A % C) * D + <factor> % <newexp>
         ->    A  = ( B ^  C <  A % C) * D + <newexp> % <newexp> 
         ->    A  = ( B ^  C <  A % C) * D + <id> % <newexp>
         ->    A  = ( B ^  C <  A % C) * D + B % <newexp>
         ->    A  = ( B ^  C <  A % C) * D + B % <id>
         ->    A  = ( B ^  C <  A % C) * D + B % A      
 